//includes
'include "PC_Register.v"
'include "Adder.v"
'include "Stages.v"
'include "instruction_memory.v"
'include "Control_Unit.v"

module PPU (
  




);

reg Reset;
reg Clk;
reg S;


/*********** Iterations Of Modules ***********/


//Maybe we could add a reset module idk

//PC_Register
PC_Register PC(
    LE, Reset, clk, PC_In, //PC_Register Inputs
    PC_Out);//PC_Register Output
    Adder_Plus4 add(PC_Out,32'b100);


/*********** Stages ***********/


//IF_ID_Register
IF_ID_Register IF_ID(
    Instuction_Mem_OUT, LE, Reset, clk, //IF_ID_Register Inputs
    I31_I0 //IF_ID_Register Output
);

//ID_EX_Register
ID_EX_Register ID_EX(
    //ID_EX_Register Inputs
    EX_Load_Instr_IN, EX_RF_Enable_IN, RAM_Enable_IN, RAM_RW_IN, RAM_SE_IN,
    Reset, clk,
    JALR_Instr_IN, JAL_Instr_IN, AUIPC_Instr_IN,
    EX_ALU_op_IN, EX_shift_imm_IN, RAM_Size_IN, Comb_OpFunct_IN 
    
    //ID_EX_Register Outputs
    EX_Load_Instr_OUT, EX_RF_Enable_OUT, RAM_Enable_OUT, RAM_RW_OUT, RAM_SE_OUT, 
    JALR_Instr_OUT, JAL_Instr_OUT, AUIPC_Instr_OUT,
    EX_ALU_op_OUT, EX_shift_imm_OUT, RAM_Size_OUT, Comb_OpFunct_OUT
);

//EX_MEM_Register
EX_MEM_Register EX_MEM(
    //EX_MEM_Register Inputs
    EX_Load_Instr_IN, EX_RF_Enable_IN, RAM_Enable_IN, RAM_RW_IN, RAM_SE_IN,
    Reset, clk, RAM_Size_IN, 

    //EX_MEM_Register Outputs
    EX_Load_Instr_OUT, EX_RF_Enable_OUT, RAM_Enable_OUT, RAM_RW_OUT, RAM_SE_OUT,
    RAM_Size_OUT
);

//MEM_WB_Register
MEM_WB_Register MEM_WB(
    //MEM_WB_Register Inputs
    EX_RF_Enable_IN,
    Reset, clk, 

    //MEM_WB_Register Outputs
    EX_RF_Enable_OUT
);

//instruction_memory
instruction_memory Inst_Mem(
    //instruction_memory Output
    I,

    //instruction_memory Input
    A
);

//Control Unit













/*----------| PRECHARGING STAGE |----------*/

    integer fi, code, i;
    reg [31:0] data;
    reg [8:0] Address;
    wire [31:0] Instruction;
    instruction_memory imem (Instruction, Address);

    initial begin
        // Precharging the Instruction Memory
        fi = $fopen("input_file.txt","r");
        Address = 9'b000000000;
        while (!$feof(fi)) begin
            code = $fscanf(fi, "%b", data);
            imem.Mem[Address] = data;
            Address = Address + 1;
        end
        $fclose(fi);
        Address = 9'b000000000;
    end

/*----------| PRECHARGING FINISHED |----------*/









// Clock generator
initial begin
    Reset <= 1'b1;
    LE <= 1'b1;
    S <= 1'b0;
    Clk <= 1'b0;
    #2 Clk <= ~Clk;
    #1 Reset <= 1'b0;
    #1 Clk <= ~Clk; 
    forever #2 Clk = ~Clk;
end

initial begin
  #52;
  $display("\n----------------------------------------------------------\nDONE :D");
  $finish;
end 

initial begin
  $monitor("");
end

endmodule
