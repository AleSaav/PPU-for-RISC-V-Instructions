//INSTRUCTION MEMORY IMPLEMENTATION

module instruction_memory(output reg [31:0] I, input [8:0] A);
    reg [7:0] Mem[0:511]; // 512 localizaciones de 8 bits

    always @ (A) begin
        I <= {Mem[A+3], Mem[A+2], Mem[A+1], Mem[A]};
    end
endmodule

//INSTRUCTION MEMORY TESTBENCH

`include "instruction_memory.v"
module memory_loader;
    integer fi, code, i;
    reg [31:0] data;
    reg [8:0] Address;
    wire [31:0] Instruction;
    instruction_memory imem (Instruction, Address);

    initial begin
        // Carga de la memoria ROM con el archivo
        fi = $fopen("input_file.txt","r");
        Address = 9'b000000000;
        while (!$feof(fi)) begin
            code = $fscanf(fi, "%b", data);
            imem.Mem[Address] = data;
            Address = Address + 1;
        end
        $fclose(fi);

        // Pruebas de lectura
        for (i = 0; i < 16; i = i + 4) begin
            Address = i;
            #1;
            $display("A = %d, I = %h", Address, Instruction);
        end
    end
endmodule

//DATA MEMORY IMPLEMENTATION

module ram512x8 (
    output reg [31:0] DataOut, 
    input Enable, 
    input ReadWrite, 
    input [8:0] Address, 
    input [31:0] DataIn, 
    input [1:0] Size, 
    input SignExtend
);
    reg [7:0] Mem[0:511]; // 512 localizaciones de 8 bits

    // Helper function for sign extension
    function [31:0] SignExtender;
        input [7:0] ByteData;
        input [15:0] HalfWordData;
        input UseByte, Sign;
        begin
            if (UseByte) begin
                SignExtender = { {24{Sign & ByteData[7]}}, ByteData };
            end else begin
                SignExtender = { {16{Sign & HalfWordData[15]}}, HalfWordData };
            end
        end
    endfunction

    always @ (posedge Enable) begin
        if (ReadWrite) begin // Write operation
            case (Size)
                2'b00: // Byte
                    Mem[Address] = DataIn[7:0];
                2'b01: // Halfword
                    begin
                        Mem[Address+1] = DataIn[15:8];
                        Mem[Address] = DataIn[7:0];
                    end
                2'b10: // Word
                    begin
                        Mem[Address+3] = DataIn[31:24];
                        Mem[Address+2] = DataIn[23:16];
                        Mem[Address+1] = DataIn[15:8];
                        Mem[Address] = DataIn[7:0];
                    end
            endcase
        end else if (!ReadWrite && Enable) begin // Read operation
            case (Size)
                2'b00: // Byte
                    DataOut = SignExtend ? SignExtender(Mem[Address], 16'b0, 1, Mem[Address][7]) : {24'b0, Mem[Address]};
                2'b01: // Halfword
                    DataOut = SignExtend ? SignExtender(Mem[Address+1], {Mem[Address+1], Mem[Address]}, 0, Mem[Address+1][7]) : {16'b0, Mem[Address+1], Mem[Address]};
                2'b10, 2'b11: // Word
                    DataOut = {Mem[Address+3], Mem[Address+2], Mem[Address+1], Mem[Address]};
            endcase
        end
    end
endmodule

//DATA MEMORY TESTBENCH

`include "dataMemory.v"
module RAM_Testbench;
    integer fi, code;
    reg [7:0] byte_data;
    reg Enable, ReadWrite, SignExtend;
    reg [31:0] DataIn;
    reg [8:0] Address;
    reg [1:0] Size;
    wire [31:0] DataOut;

    ram512x8 ram (DataOut, Enable, ReadWrite, Address, DataIn, Size, SignExtend);

    initial begin
        // Precargar memoria
        fi = $fopen("input_file.txt", "r");
        Address = 0;
        while (!$feof(fi)) begin
            code = $fscanf(fi, "%b\n", byte_data);
            ram.Mem[Address] = byte_data;
            Address = Address + 1;
        end
        $fclose(fi);

        // (Operaciones de leer y escribir) 
        // 1. Leer un word de las localizaciones 0, 4, 8 y 12.
        ReadWord(9'b000000000); // Localización 0
        ReadWord(9'b000000100); // Localización 4
        ReadWord(9'b000001000); // Localización 8
        ReadWord(9'b000001100); // Localización 12

        // 2. Leer sin signo un byte, halfword, halfword de las localizaciones 0, 2 y 4 respectivamente.
        ReadByte(9'b000000000, 0); // Localización 0
        ReadHalfWord(9'b000000010, 0); // Localización 2
        ReadHalfWord(9'b000000100, 0); // Localización 4

        // 3. Leer con signo un byte, halfword, halfword de las localizaciones 0, 2 y 4 respectivamente.
        ReadByte(9'b000000000, 1); // Localización 0
        ReadHalfWord(9'b000000010, 1); // Localización 2
        ReadHalfWord(9'b000000100, 1); // Localización 4

        // 4. Escribir un byte, halfword, halfword, word en las localizaciones 0, 2, 4, 8 respectivamente.
        WriteByte(9'b000000000, 8'hA6); // Localización 0
        WriteHalfWord(9'b000000010, 16'hBBDD); // Localización 2
        WriteHalfWord(9'b000000100, 16'h5419); // Localización 4
        WriteWord(9'b000001000, 32'hABCDEF01); // Localización 8

        // 5. Leer un Word de las localizaciones 0, 4 y 8.
        ReadWord(9'b000000000); // Localización 0
        ReadWord(9'b000000100); // Localización 4
        ReadWord(9'b000001000); // Localización 8
    end

    // Funciones auxiliares para lectura y escritura
    task ReadWord;
        input [8:0] Addr;
        begin
            Address = Addr; ReadWrite = 0; Size = 2'b10; Enable = 1; SignExtend = 0;
            #10; PrintResult(Address, DataOut, Size, ReadWrite, Enable, SignExtend);
            Enable = 0;
        end
    endtask

    task ReadHalfWord;
        input [8:0] Addr; input SE;
        begin
            Address = Addr; ReadWrite = 0; Size = 2'b01; Enable = 1; SignExtend = SE;
            #10; PrintResult(Address, DataOut, Size, ReadWrite, Enable, SignExtend);
            Enable = 0;
        end
    endtask

    task ReadByte;
        input [8:0] Addr; input SE;
        begin
            Address = Addr; ReadWrite = 0; Size = 2'b00; Enable = 1; SignExtend = SE;
            #10; PrintResult(Address, DataOut, Size, ReadWrite, Enable, SignExtend);
            Enable = 0;
        end
    endtask

    task WriteByte;
        input [8:0] Addr; input [7:0] Data;
        begin
            Address = Addr; DataIn = Data; ReadWrite = 1; Size = 2'b00; Enable = 1;
            #10; Enable = 0;
        end
    endtask

    task WriteHalfWord;
        input [8:0] Addr; input [15:0] Data;
        begin
            Address = Addr; DataIn = Data; ReadWrite = 1; Size = 2'b01; Enable = 1;
            #10; Enable = 0;
        end
    endtask

    task WriteWord;
        input [8:0] Addr; input [31:0] Data;
        begin
            Address = Addr; DataIn = Data; ReadWrite = 1; Size = 2'b10; Enable = 1;
            #10; Enable = 0;
        end
    endtask

    // Función auxiliar para imprimir resultados
    task PrintResult;
        input [8:0] Addr;
        input [31:0] Data;
        input [1:0] Sz;
        input RW, En, SE;
        begin
            $display("Address: %d, Data: %h, Size: %b, R/W: %b, Enable: %b, SignExtend: %b", Addr, Data, Sz, RW, En, SE);
        end
    endtask

    
endmodule
